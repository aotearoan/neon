import{M as _,_ as g}from"../index.js";import{C as k}from"./ComponentDocumentation-6caf88ca.js";import{E as v}from"./Editor-1d4a4353.js";import{N,a as V}from"./NeonCardHeader-5e3d5e8c.js";import{N as w}from"./NeonChip-3363ca9c.js";import{N as z}from"./NeonStack-fb7ab566.js";import{N as S}from"./NeonToggle-81e1e8ae.js";import{u as M,R as b,S as B,D as r,F as E,G as l,A as I,x as L,L as o,H as s,a2 as W}from"./vendor-7a8d752b.js";import"./NeonLabel-387f69e3.js";import"./NeonNote-2bf2c89c.js";import"./NeonInline-e4d49a2a.js";import"./NeonTabs-5786a26a.js";const y=M({name:"Chip",components:{NeonCard:N,NeonCardBody:V,NeonChip:w,NeonToggle:S,NeonStack:z,ComponentDocumentation:k,Editor:v},setup(){const e=b(null),i=b("Removable chips for tagging and inputs"),u=()=>console.log("clicked!"),p=()=>console.log("removed!"),m=`<neon-chip label="Small" size="s" />
<neon-chip label="Medium" size="m" />
<neon-chip label="Large" size="l" />`,h=`<neon-chip label="Neutral" />
<neon-chip label="Low Contrast" color="low-contrast" />
<neon-chip label="High Contrast" color="high-contrast" />
<neon-chip label="Brand" color="brand" />
<neon-chip label="Info" color="info" />
<neon-chip label="Success" color="success" />
<neon-chip label="Warning" color="warn" />
<neon-chip label="Error" color="error" />`,a=`<neon-chip label="Clickable" color="info" @click="click" />
<neon-chip action="remove" label="Removable" color="info" @close="remove" />
<neon-chip :disabled="true" action="remove" label="Disabled" color="info" />`,t='<neon-chip icon="moon" label="With icon" />';return B(()=>e.value=_.getComponentConfig("NeonChip")),{menuModel:e,headline:i,chipSizes:m,chipColors:h,chipActions:a,chipIcons:t,click:u,remove:p}}}),A=s("p",null,[s("strong",null,"NeonChip"),W(" is a clickable or removable chip which can be used as a tag or to indicate selected values in filters and other more complex inputs (e.g. search / multiselect). Clicking the chip results in a callback and in the case it is removable, also removal of the chip. Chips are designed to fit inside inputs for creating more complex input components. ")],-1),D=s("p",null," Chips are navigable via tab (tabindex). When focussed, use space, return or enter to click on clickable tabs and, in the case of removable tabs, use backspace and delete to remove a tab. Escape will blur a focussed tab. ",-1),R=s("h2",{class:"neon-h3"},"Chip sizes",-1),U=s("h2",{class:"neon-h3"},"Chip colors",-1),$=s("h2",{class:"neon-h3"},"Chip actions",-1),H=s("h2",{class:"neon-h3"},"Chip with icon",-1);function T(e,i,u,p,m,h){const a=r("neon-stack"),t=r("neon-card-body"),n=r("neon-chip"),d=r("editor"),f=r("neon-card"),C=r("component-documentation");return e.menuModel?(L(),E(C,{key:0,headline:e.headline,model:e.menuModel},{default:l(()=>[o(f,null,{default:l(()=>[o(t,null,{default:l(()=>[o(a,null,{default:l(()=>[A,D]),_:1})]),_:1}),o(t,null,{default:l(()=>[R,o(a,null,{default:l(()=>[o(a,null,{default:l(()=>[o(n,{label:"Small",size:"s"}),o(n,{label:"Medium",size:"m"}),o(n,{label:"Large",size:"l"})]),_:1}),o(d,{modelValue:e.chipSizes,"onUpdate:modelValue":i[0]||(i[0]=c=>e.chipSizes=c)},null,8,["modelValue"])]),_:1})]),_:1}),o(t,null,{default:l(()=>[U,o(a,null,{default:l(()=>[o(a,null,{default:l(()=>[o(n,{label:"Neutral"}),o(n,{color:"low-contrast",label:"Low Contrast"}),o(n,{color:"high-contrast",label:"High Contrast"}),o(n,{color:"brand",label:"Brand"}),o(n,{color:"info",label:"Info"}),o(n,{color:"success",label:"Success"}),o(n,{color:"warn",label:"Warning"}),o(n,{color:"error",label:"Error"})]),_:1}),o(d,{modelValue:e.chipColors,"onUpdate:modelValue":i[1]||(i[1]=c=>e.chipColors=c)},null,8,["modelValue"])]),_:1})]),_:1}),o(t,null,{default:l(()=>[$,o(a,null,{default:l(()=>[o(a,null,{default:l(()=>[o(n,{color:"info",label:"Clickable",onClick:e.click},null,8,["onClick"]),o(n,{action:"remove",color:"info",label:"Removable",onClose:e.remove},null,8,["onClose"]),o(n,{disabled:!0,action:"remove",color:"info",label:"Disabled"})]),_:1}),o(d,{modelValue:e.chipActions,"onUpdate:modelValue":i[2]||(i[2]=c=>e.chipActions=c)},null,8,["modelValue"])]),_:1})]),_:1}),o(t,null,{default:l(()=>[H,o(a,null,{default:l(()=>[o(a,null,{default:l(()=>[o(n,{icon:"moon",label:"With icon"})]),_:1}),o(d,{modelValue:e.chipIcons,"onUpdate:modelValue":i[3]||(i[3]=c=>e.chipIcons=c)},null,8,["modelValue"])]),_:1})]),_:1})]),_:1})]),_:1},8,["headline","model"])):I("",!0)}const x=g(y,[["render",T]]);export{x as default};
