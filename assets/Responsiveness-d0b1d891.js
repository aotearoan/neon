import{N as f}from"./NeonAnchor-bb924e20.js";import{N as g,b,a as v}from"./NeonCardHeader-5e3d5e8c.js";import{b as w,_ as x}from"../index.js";import{N as k}from"./NeonStack-fb7ab566.js";import{E as y}from"./Editor-1d4a4353.js";import{u as N,R as m,D as i,F as S,G as o,x as R,L as n,H as e,a2 as s}from"./vendor-7a8d752b.js";const V=N({name:"Responsiveness",components:{NeonAnchor:f,NeonCard:g,NeonCardHeader:b,NeonCardBody:v,NeonLink:w,NeonStack:k,Editor:y},setup(){const a=m(`@use '@aotearoan/neon/sass/includes/responsive';

@include responsive.responsive(larger-than-tablet) {
  // add desired larger-than-tablet responsive styling here
}`),l=m(`const responsiveView = ref<boolean>(false);

const handleResize = () => {
  responsiveView.value = window.matchMedia(NeonResponsiveUtils.breakpoints[NeonResponsive.MobileLarge]).matches;
}

onMounted(() => {
  window.addEventListener('resize', handleResize, { passive: true });
  handleResize();
});

onUnmounted(() => {
  window.removeEventListener('resize', handleResize);
});`);return{sassExample:a,typescriptExample:l}}}),C=e("h1",null,"Responsiveness",-1),E=e("h2",{class:"neon-h4"},"Breakpoints",-1),U=e("p",null,[s(" Neon comes with a predefined set of breakpoints both in SASS and Typescript. Breakpoints are defined in both directions e.g. "),e("em",null,"tablet"),s(" and "),e("em",null,"larger-than-tablet"),s(". ")],-1),z=e("p",null,"Here are the defined breakpoints:",-1),G=e("ul",null,[e("li",null,"mobile (max-width: 414px)"),e("li",null,"larger-than-mobile (min-width: 415px)"),e("li",null,"mobile-large (max-width: 599px)"),e("li",null,"larger-than-mobile-large (min-width: 600px)"),e("li",null,"tablet (max-width: 1024px)"),e("li",null,"larger-than-tablet (min-width: 1025px)"),e("li",null,"desktop (max-width: 1439px)"),e("li",null,"desktop-large (min-width: 1440px)")],-1),A=e("h2",{class:"neon-h4"},"SASS Mixins",-1),B=e("p",null,[s("A SASS mixin "),e("strong",null,"responsive(breakpoint)"),s(" is provided for convenience, e.g.")],-1),T=e("h2",{class:"neon-h4"},"Typescript",-1),L=e("p",null," Using SASS breakpoints should be preferred, however sometimes this is not enough. Use NeonResponsiveUtils.breakpoints in combination with a window resize listener to manage changes in the responsive breakpoints, e.g. ",-1),M=e("h2",{class:"neon-h4"},"Page content",-1),$=e("p",null," This provides developers with the benefits of using CSS Grid without dealing with the steep learning curve and complexities of using it directly. ",-1);function H(a,l,D,F,J,P){const _=i("neon-card-header"),c=i("neon-card"),r=i("neon-anchor"),t=i("neon-stack"),d=i("neon-card-body"),h=i("editor"),p=i("neon-link");return R(),S(t,null,{default:o(()=>[n(c,null,{default:o(()=>[n(_,null,{default:o(()=>[C]),_:1})]),_:1}),n(c,null,{default:o(()=>[n(d,null,{default:o(()=>[n(r,{id:"breakpoints"}),E,n(t,null,{default:o(()=>[U,n(t,{gap:"s"},{default:o(()=>[z,G]),_:1})]),_:1})]),_:1}),n(d,null,{default:o(()=>[n(r,{id:"sass-mixins"}),A,n(t,{gap:"s"},{default:o(()=>[B,n(h,{modelValue:a.sassExample,"onUpdate:modelValue":l[0]||(l[0]=u=>a.sassExample=u),language:"scss"},null,8,["modelValue"])]),_:1})]),_:1}),n(d,null,{default:o(()=>[n(r,{id:"typescript"}),T,n(t,null,{default:o(()=>[e("p",null,[n(p,{href:"/utils/NeonResponsiveUtils"},{default:o(()=>[s("NeonResponsiveUtils")]),_:1}),s(" also defines the same breakpoints for use in Typescript/Javascript. ")]),n(t,{gap:"s"},{default:o(()=>[L,n(h,{modelValue:a.typescriptExample,"onUpdate:modelValue":l[1]||(l[1]=u=>a.typescriptExample=u),language:"typescript"},null,8,["modelValue"])]),_:1})]),_:1})]),_:1}),n(d,null,{default:o(()=>[n(r,{id:"page-content"}),M,n(t,null,{default:o(()=>[e("p",null,[s(" Neon's approach to page content layout is to use CSS Grid via the "),n(p,{href:"/layout/grid"},{default:o(()=>[s("NeonGrid")]),_:1}),s(" component. "),n(p,{href:"/layout/grid"},{default:o(()=>[s("NeonGrid")]),_:1}),s(" is a CSS Grid based container designed to help simplify page application layout and responsiveness by abstracting CSS Grid and allowing applications to define this programmatically in Typescript. ")]),$]),_:1})]),_:1})]),_:1})]),_:1})}const W=x(V,[["render",H]]);export{W as default};
