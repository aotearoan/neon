import{N as u}from"./NeonAnchor-bb924e20.js";import{N as r,b as p,a as h}from"./NeonCardHeader-5e3d5e8c.js";import{b as m,_ as y}from"../index.js";import{N as f}from"./NeonStack-fb7ab566.js";import{u as v,D as n,F as x,G as t,x as g,L as o,H as e,a2 as a}from"./vendor-7a8d752b.js";const N=v({name:"Layout",components:{NeonAnchor:u,NeonCard:r,NeonCardHeader:p,NeonCardBody:h,NeonLink:m,NeonStack:f}}),b=e("h1",null,"Layout",-1),k=e("h2",{class:"neon-h4"},"Units & Spacing",-1),w=e("p",null,[a(" Neon uses "),e("strong",null,"rems"),a(" as the units of measurement across the entire component library. By default, Neon will set the rems:px ratio to 1:1 in the document HTML element. This means 24px = 24rems which makes calculations easier to reason about. ")],-1),G=e("p",null,[a(" Spacing is all relative to the CSS variable "),e("em",null,"--neon-base-space"),a(" which has a default value of "),e("em",null,"4rem"),a(" (=4px). So adjusting all spacing is as simple as changing this variable. ")],-1),S=e("h2",{class:"neon-h4"},"Desktop layout",-1),C=e("p",null," Neon provides a default page layout. Adhering to this structure ensures the provided responsive behaviour is preserved. Most of the layout is structured using component slots with the exception of the NeonPage #content slot. This is left open for any content, however if you choose to use NeonGrid and NeonFooter providing these directly in the NeonPage #content slot will preserve the responsiveness of the page. ",-1),T=e("p",null,"The recommended desktop (i.e. larger-than-tablet size) component/slot layout is as follows:",-1),A={class:"layout-example"},B={class:"layout-example"},L={class:"layout-example__label"},F={class:"layout-example__content"},P={class:"layout-example layout-example__side-nav"},$={class:"layout-example__label"},D=e("div",{class:"layout-example layout-example__side-nav-section"},[e("span",{class:"layout-example__label"},"#sticky")],-1),H=e("div",{class:"layout-example layout-example__side-nav-section"},[e("span",{class:"layout-example__label"},"#scrolling")],-1),V={class:"layout-example layout-example__grid-wrapper"},z=e("span",{class:"layout-example__label"},"#content",-1),M={class:"layout-example"},R={class:"layout-example"},j={class:"layout-example__label"},I=e("div",{class:"layout-example__label"},"...",-1),U={class:"layout-example"},q={class:"layout-example__label"},E={class:"layout-example"},J=e("h2",{class:"neon-h4"},"Responsive layout",-1),K=e("em",null,"responsive",-1),O={class:"layout-example"},Q={class:"layout-example"},W={class:"layout-example__label"},X={class:"layout-example__content"},Y={class:"layout-example layout-example__grid-wrapper"},Z=e("span",{class:"layout-example__label"},"#content",-1),ee={class:"layout-example"},ae={class:"layout-example"},oe={class:"layout-example__label"},te=e("div",{class:"layout-example__label"},"...",-1),se={class:"layout-example"},le={class:"layout-example__label"},ne={class:"layout-example"},ie=e("h2",{class:"neon-h4"},"Page content",-1),_e=e("strong",null,"content",-1),de=e("p",null," This provides developers with the benefits of using CSS Grid without dealing with the steep learning curve and complexities of using it directly. ",-1);function ce(ue,re,pe,he,me,ye){const c=n("neon-card-header"),d=n("neon-card"),i=n("neon-anchor"),l=n("neon-stack"),_=n("neon-card-body"),s=n("neon-link");return g(),x(l,null,{default:t(()=>[o(d,null,{default:t(()=>[o(c,null,{default:t(()=>[b]),_:1})]),_:1}),o(d,null,{default:t(()=>[o(_,null,{default:t(()=>[o(i,{id:"units-&-spacing"}),k,o(l,null,{default:t(()=>[w,G]),_:1})]),_:1}),o(_,null,{default:t(()=>[o(i,{id:"desktop-layout"}),S,o(l,null,{default:t(()=>[C,o(l,{gap:"s"},{default:t(()=>[T,e("div",A,[o(s,{class:"layout-example__label",href:"/layout/page"},{default:t(()=>[a("NeonPage")]),_:1}),e("div",B,[e("span",L,[a("#top-nav ("),o(s,{class:"layout-example__link",href:"/layout/top-nav"},{default:t(()=>[a("NeonTopNav")]),_:1}),a(")")])]),e("div",F,[e("div",P,[e("span",$,[a("#side-nav ("),o(s,{class:"layout-example__link",href:"/layout/side-nav"},{default:t(()=>[a("NeonSideNav")]),_:1}),a(")")]),D,H]),e("div",V,[z,e("div",M,[o(s,{class:"layout-example__label",href:"/layout/grid"},{default:t(()=>[a("NeonGrid")]),_:1}),e("div",R,[e("span",j,[a("Grid section 1 ("),o(s,{class:"layout-example__link",href:"/layout/grid#api"},{default:t(()=>[a("NeonGridArea")]),_:1}),a(")")])]),I,e("div",U,[e("span",q,[a("Grid section n ("),o(s,{class:"layout-example__link",href:"/layout/grid#api"},{default:t(()=>[a("NeonGridArea")]),_:1}),a(")")])])]),e("div",E,[o(s,{class:"layout-example__label",href:"/layout/footer"},{default:t(()=>[a("NeonFooter")]),_:1})])])])])]),_:1})]),_:1})]),_:1}),o(_,null,{default:t(()=>[o(i,{id:"responsive-layout"}),J,o(l,null,{default:t(()=>[e("p",null,[a(" The "),K,a(" layout is the same as the desktop layout with the exception of the Side Nav being removed due to the narrower width. Instead of displaying the Side Nav at smaller screen sizes it is recommended to provide the side navigation content in a "),o(s,{href:"/layout/drawer"},{default:t(()=>[a("NeonDrawer")]),_:1}),a(" component triggered by a "),o(s,{href:"/user-input/button"},{default:t(()=>[a("NeonButton")]),_:1}),a(" . ")]),e("div",O,[o(s,{class:"layout-example__label",href:"/layout/page"},{default:t(()=>[a("NeonPage")]),_:1}),e("div",Q,[e("span",W,[a("#top-nav ("),o(s,{class:"layout-example__link",href:"/layout/top-nav"},{default:t(()=>[a("NeonTopNav")]),_:1}),a(")")])]),e("div",X,[e("div",Y,[Z,e("div",ee,[o(s,{class:"layout-example__label",href:"/layout/grid"},{default:t(()=>[a("NeonGrid")]),_:1}),e("div",ae,[e("span",oe,[a("Grid section 1 ("),o(s,{class:"layout-example__link",href:"/layout/grid#api"},{default:t(()=>[a("NeonGridArea")]),_:1}),a(")")])]),te,e("div",se,[e("span",le,[a("Grid section n ("),o(s,{class:"layout-example__link",href:"/layout/grid#api"},{default:t(()=>[a("NeonGridArea")]),_:1}),a(")")])])]),e("div",ne,[o(s,{class:"layout-example__label",href:"/layout/footer"},{default:t(()=>[a("NeonFooter")]),_:1})])])])])]),_:1})]),_:1}),o(_,null,{default:t(()=>[o(i,{id:"page-content"}),ie,o(l,null,{default:t(()=>[e("p",null,[a(" Neon's approach to page "),_e,a(" layout is to use CSS Grid to create the top level layout and use flexbox for the layout at lower levels. CSS Grid layout is achieved via the "),o(s,{href:"/layout/grid"},{default:t(()=>[a("NeonGrid")]),_:1}),a(" component. "),o(s,{href:"/layout/grid"},{default:t(()=>[a("NeonGrid")]),_:1}),a(" is a CSS Grid based container designed to help simplify page application layout and responsiveness by abstracting CSS Grid and allowing applications to define this programmatically in Typescript. ")]),de,e("p",null,[a(" For more information about responsiveness in Neon see the "),o(s,{href:"/design/responsiveness"},{default:t(()=>[a("Responsiveness")]),_:1}),a(" page. ")])]),_:1})]),_:1})]),_:1})]),_:1})}const be=y(N,[["render",ce]]);export{be as default};
