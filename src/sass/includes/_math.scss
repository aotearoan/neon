@use 'sass:math';

$PI: 3.141592653589793;
$LN2: 0.6931471805599453;
$SQRT2: 1.4142135623730951;

// Returns base to the exponent power.
// @param {Number} $base The base number
// @param {Number} $exp The exponent to which to raise base
// @return {Number}
// @example
//     pow(4, 2)   // 16
//     pow(4, -2)  // 0.0625
//     pow(4, 0.2) // 1.31951
@function pow($base, $exp) {
  @if $exp == floor($exp) {
    $r: 1;
    $s: 0;
    @if $exp < 0 {
      $exp: $exp * -1;
      $s: 1;
    }
    @while $exp > 0 {
      @if $exp % 2 == 1 {
        $r: $r * $base;
      }
      $exp: floor($exp * 0.5);
      $base: $base * $base;
    }
    @return if($s != 0, math.div(1, $r), $r);
  } @else if $base == 0 and $exp > 0 {
    @return 0;
  } @else {
    $expint: floor($exp);
    $r1: pow($base, $expint);
    $r2: _exp(log($base) * ($exp - $expint));
    @return $r1 * $r2;
  }
}

// A good approximation for $x close to 0.
@function _exp($x) {
  $ret: 0;
  $i: 1;
  @for $n from 0 to 24 {
    $ret: $ret + $i;
    $i: math.div($i * $x, ($n + 1));
  }
  @return $ret;
}

// Returns the natural logarithm of a number.
// @param {Number} $x
// @param {Number} $b The base number
// @example
//     log(2)     // 0.69315
//     log(10)    // 2.30259
//     log(2, 10) // 0.30103
@function log($x, $b: null) {
  @if $b != null {
    @return math.div(log($x), log($b));
  }

  @if $x <= 0 {
    @return math.div(0, 0);
  }
  $k: nth(frexp(math.div($x, $SQRT2)), 2);
  $x: math.div($x, ldexp(1, $k));

  @return $LN2 * $k + _log($x);
}

// a good aproximation for $x close to 1
@function _log($x) {
  $x: math.div(($x - 1), ($x + 1));
  $x2: $x * $x;
  $i: 1;
  $s: $x;
  $sp: null;
  @while $sp != $s {
    $x: $x * $x2;
    $i: $i + 2;
    $sp: $s;
    $s: $s + math.div($x, $i);
  }
  @return 2 * $s;
}

// Returns a two-element list containing the normalized fraction and exponent of number.
// @param {Number} $x
// @return {List} fraction, exponent
@function frexp($x) {
  $exp: 0;
  @if $x < 0 {
    $x: $x * -1;
  }
  @if $x < 0.5 {
    @while $x < 0.5 {
      $x: $x * 2;
      $exp: $exp - 1;
    }
  } @else if $x >= 1 {
    @while $x >= 1 {
      $x: math.div($x, 2);
      $exp: $exp + 1;
    }
  }
  @return $x, $exp;
}

// Returns $x * 2^$exp
// @param {Number} $x
// @param {Number} $exp
@function ldexp($x, $exp) {
  $b: if($exp >= 0, 2, 0.5);
  @if $exp < 0 {
    $exp: $exp * -1;
  }
  @while $exp > 0 {
    @if $exp % 2 == 1 {
      $x: $x * $b;
    }
    $b: $b * $b;
    $exp: floor($exp * 0.5);
  }
  @return $x;
}

// Returns the square root of a number.
// @param {Number} $x
// @example
//     sqrt(2) // 1.41421
//     sqrt(5) // 2.23607
@function sqrt($x) {
  @if $x < 0 {
    @warn "Argument for `sqrt()` must be a positive number.";
    @return null;
  }
  $ret: 1;
  @for $i from 1 through 24 {
    $ret: $ret - math.div(($ret * $ret - $x), (2 * $ret));
  }
  @return $ret;
}

// Returns the arctangent of the quotient of its arguments.
// @param {Number} $y
// @param {Number} $x
// @example
//     atan2(0, 0)       // 0
//     atan2(0, -0.0)    // 3.14159
//     atan2(-0.0, 0)    // 0
//     atan2(-0.0, -0.0) // -3.14159
//     atan2(0, 1)       // 0
//     atan2(0, -1)      // 3.14159
@function atan2($y, $x) {
  @if $x > 0 {
    @return atan(math.div($y, $x));
  } @else if $x < 0 {
    @if $y < 0 {
      @return atan(math.div($y, $x)) - $PI;
    } @else {
      @return atan(math.div($y, $x)) + $PI;
    }
  } @else {
    @if $y < 0 {
      @return math.div(-$PI, 2);
    } @else if $y > 0 {
      @return math.div($PI, 2);
    } @else {
      @if math.div(1, $x) == math.div(1, 0) {
        @return 0;
      } @else {
        @if math.div(1, $y) == math.div(1, 0) {
          @return $PI;
        } @else {
          @return -$PI;
        }
      }
    }
  }
}

// Returns the arctangent of a number.
// @param {Number} $x
// @example
//     atan(0.1) // 0.09967
//     atan(-1)  // -0.7854
@function atan($x) {
  $i: 24;
  $sgn: 0;
  $a: 0;
  @if $x > 1 {
    $sgn: 1;
    $x: math.div(1, $x);
  } @else if $x < -1 {
    $sgn: -1;
    $x: math.div(1, $x);
  }
  @while $i > 0 {
    $a: math.div(($i * $i * $x * $x), (2 * $i + 1 + $a));
    $i: $i - 1;
  }
  @if $sgn > 0 {
    @return math.div($PI, 2) - math.div($x, (1 + $a));
  } @else if $sgn < 0 {
    @return math.div(-$PI, 2) - math.div($x, (1 + $a));
  } @else {
    @return math.div($x, (1 + $a));
  }
}

// Returns the cosine of a number.
// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.
// @example
//     cos(0.7854) // 0.70711
//     cos(45deg)  // 0.70711
@function cos($x) {
  $x: unitless-rad($x) % ($PI * 2);
  $ret: 1;
  $i: 1;
  @for $n from 1 to 24 {
    $i: math.div(math.div($i * -1 * $x * $x, (2 * $n)), (2 * $n - 1));
    $ret: $ret + $i;
  }
  @return $ret;
}

// Returns the sine of a number.
// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.
// @example
//     sin(1.0472) // 0.86603
//     sin(60deg)  // 0.86603
@function sin($x) {
  $x: unitless-rad($x);
  @return cos($x - math.div($PI, 2));
}

// Convert to unitless rad
@function unitless-rad($angle) {
  @return math.div(0rad + $angle, 1rad);
}
