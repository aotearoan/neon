@mixin input-size($size, $font-size, $neon-line-height-one) {
  .neon-input__text,
  .neon-input__textarea {
    font-size: $font-size;
  }

  .neon-input__text {
    height: $size;
  }

  &.neon-input--state-loading,
  &.neon-input--state-success,
  &.neon-input--state-error,
  &.neon-input--with-icon {
    .neon-input__text {
      padding-right: $size;
    }

    .neon-icon {
      position: absolute;
      width: $font-size * $neon-line-height-one;
      height: $font-size * $neon-line-height-one;
      right: 0.5 * ($size - $font-size);
      top: 0.5 * ($size - $font-size) - 1px;
      cursor: default;
      border-radius: 50%;

      &:focus {
        outline: none;
      }
    }
  }

  &.neon-input--with-icon {
    .neon-icon {
      cursor: pointer;

      &:active {
        top: 0.5 * ($size - $font-size) + 1px;
      }
    }
  }
}

@mixin input(
  $neon-size-s,
  $neon-font-size-s,
  $neon-size-m,
  $neon-font-size-m,
  $neon-size-l,
  $neon-font-size-l,
  $neon-line-height-one,
  $neon-border-radius-input,
  $neon-border-width,
  $neon-border-style,
  $neon-base-space,
  $neon-body-font-family,
  $neon-letter-spacing-s,
  $neon-letter-spacing-m,
) {
  .neon-input {
    width: 100%;
    position: relative;

    &--s {
      @include input-size($neon-size-s, $neon-font-size-s, $neon-line-height-one);
    }

    &--m {
      @include input-size($neon-size-m, $neon-font-size-m, $neon-line-height-one);
    }

    &--l {
      @include input-size($neon-size-l, $neon-font-size-m, $neon-line-height-one);
    }

    &__text,
    &__textarea {
      border-radius: $neon-border-radius-input;
      border: $neon-border-width $neon-border-style;
      padding: $neon-base-space 2.5 * $neon-base-space;
      line-height: $neon-line-height-one;
      outline: none;
      font-family: $neon-body-font-family;
      width: 100%;

      &::placeholder {
        font-family: $neon-body-font-family;
        letter-spacing: $neon-letter-spacing-s;
      }

      &-counter {
        position: absolute;
        bottom: 2 * $neon-base-space;
        right: 2 * $neon-base-space;
        user-select: none;
        font-size: $neon-font-size-s;
        letter-spacing: $neon-letter-spacing-s;
      }
    }

    &:not(.neon-input--placeholder-visible) {
      input[type='password'] {
        font-weight: bold;
        letter-spacing: 2 * $neon-letter-spacing-m;
      }
    }

    &__text[type='number'],
    &__text[inputmode='tel'],
    &__text[inputmode='decimal'],
    &__text[inputmode='numeric'] {
      font-variant: tabular-nums;
    }

    &--disabled {
      input,
      textarea {
        cursor: not-allowed;
      }
    }
  }
}

@mixin input-colors(
  $neon-border-color-input,
  $neon-color-text,
  $neon-background-color-input,
  $neon-inset-shadow,
  $neon-color-placeholder,
  $neon-functional-colors,
  $neon-color-input-selected,
  $neon-theme,
  $neon-background-color-input-active,
  $neon-neutral-colors,
  $neon-success-palette,
  $neon-error-palette,
  $neon-color-disabled-dark,
  $neon-color-disabled-light,
) {
  .neon-input {
    &__text,
    &__textarea {
      border-color: $neon-border-color-input;
      color: $neon-color-text;
      background-color: $neon-background-color-input;
      box-shadow: $neon-inset-shadow;

      &::placeholder {
        color: $neon-color-placeholder;
      }

      &-counter {
        color: $neon-color-placeholder;
      }
    }

    @each $color, $palette in $neon-functional-colors {
      $input-color: map-get($palette, $neon-color-input-selected);
      &.neon-input--#{$color} {
        &.neon-input--focused {
          .neon-input__text,
          .neon-input__textarea {
            @if ($neon-theme == smooth and not index($neon-neutral-colors, $color)) {
              background-color: rgba(map-get($palette, $neon-color-input-selected), 0.125);

              &::placeholder {
                color: rgba(map-get($palette, $neon-color-input-selected), 0.75);
              }
            } @else {
              border-color: $input-color;
              background-color: $neon-background-color-input-active;
            }
          }
        }

        .neon-icon:focus {
          background-color: rgba($input-color, 0.125);
          box-shadow: 0 0 0 2px rgba($input-color, 0.125);
        }
      }
    }

    &.neon-input--with-state-highlight.neon-input--state-success {
      .neon-input__text,
      .neon-input__textarea {
        @if ($neon-theme == smooth) {
          background-color: rgba(map-get($neon-success-palette, $neon-color-input-selected), 0.125);

          &::placeholder {
            color: rgba(map-get($neon-success-palette, $neon-color-input-selected), 0.75);
          }
        } @else {
          border-color: map-get($neon-success-palette, $neon-color-input-selected);
        }
      }
    }

    &.neon-input--with-state-highlight.neon-input--state-error {
      &,
      &.neon-input--focused {
        .neon-input__text,
        .neon-input__textarea {
          @if ($neon-theme == smooth) {
            background-color: rgba(map-get($neon-error-palette, $neon-color-input-selected), 0.125);

            &::placeholder {
              color: rgba(map-get($neon-error-palette, $neon-color-input-selected), 0.75);
            }
          } @else {
            border-color: map-get($neon-error-palette, $neon-color-input-selected);
          }
        }
      }
    }

    &--disabled {
      .neon-input__text,
      .neon-input__textarea {
        box-shadow: none;
        border-color: $neon-color-disabled-dark;
        background-color: $neon-color-disabled-dark;

        &,
        &::placeholder {
          color: $neon-color-disabled-light;
          -webkit-text-fill-color: $neon-color-disabled-light;
        }
      }
    }
  }
}
