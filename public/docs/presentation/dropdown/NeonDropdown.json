{
  "displayName": "NeonDropdown",
  "description": "<p>A general purpose dropdown component. This component consists of a button, to trigger the dropdown to open, and\nthe dropdown content which is displayed above the page when the user clicks the button.</p>\n<p>This can be useful for secondary (perhaps more complex) actions for which there is not enough space on the page or\nthe action is asynchronous allowing the user to perform the action and continue what they were doing. Examples are\nproviding links to copy and letting the user send feedback.</p>\n<p><strong>NeonDropdown</strong> is the basis for the <strong>NeonDropdownMenu</strong> component and the\n<strong>NeonSelect</strong> form component.</p>",
  "tags": {},
  "exportName": "default",
  "props": [
    {
      "name": "id",
      "description": "Id for the dropdown button.",
      "type": {
        "name": "string"
      }
    },
    {
      "name": "modelValue",
      "description": "Whether the dropdown is currently open.",
      "type": {
        "name": "boolean"
      },
      "required": true
    },
    {
      "name": "label",
      "description": "The label for the dropdown button.",
      "type": {
        "name": "string"
      },
      "defaultValue": {
        "func": false,
        "value": "null"
      }
    },
    {
      "name": "image",
      "description": "URL of image to display if the button style is a square or circular badge.",
      "type": {
        "name": "string"
      },
      "defaultValue": {
        "func": false,
        "value": "null"
      }
    },
    {
      "name": "imageAlt",
      "description": "Badge image ALT text.",
      "type": {
        "name": "string"
      },
      "defaultValue": {
        "func": false,
        "value": "null"
      }
    },
    {
      "name": "icon",
      "description": "An icon to display on the dropdown button. This will be to the left of any label, but can also be used on its own.",
      "type": {
        "name": "string"
      },
      "defaultValue": {
        "func": false,
        "value": "null"
      }
    },
    {
      "name": "indicator",
      "description": "Show the dropdown button's indicator (chevron).",
      "type": {
        "name": "boolean"
      },
      "defaultValue": {
        "func": false,
        "value": "true"
      }
    },
    {
      "name": "disabled",
      "description": "Disable the dropdown button",
      "type": {
        "name": "boolean"
      },
      "defaultValue": {
        "func": false,
        "value": "false"
      }
    },
    {
      "name": "size",
      "description": "The size of the dropdown button - Small, Medium or Large.",
      "type": {
        "name": "String as () => NeonSize"
      },
      "defaultValue": {
        "func": false,
        "value": "NeonSize.Medium"
      }
    },
    {
      "name": "color",
      "description": "The color of the dropdown button",
      "type": {
        "name": "String as () => NeonFunctionalColor"
      },
      "defaultValue": {
        "func": false,
        "value": "NeonFunctionalColor.LowContrast"
      }
    },
    {
      "name": "alternateColor",
      "description": "The alternate color of the dropdown button (for gradient buttons).",
      "type": {
        "name": "String as () => NeonFunctionalColor"
      },
      "defaultValue": {
        "func": false,
        "value": "null"
      }
    },
    {
      "name": "dropdownStyle",
      "description": "The style of the dropdown button",
      "type": {
        "name": "String as () => NeonDropdownStyle"
      },
      "defaultValue": {
        "func": false,
        "value": "NeonDropdownStyle.SolidButton"
      }
    },
    {
      "name": "placement",
      "description": "Placement of the dropdown contents.",
      "type": {
        "name": "String as () => NeonDropdownPlacement"
      },
      "defaultValue": {
        "func": false,
        "value": "NeonDropdownPlacement.BottomLeft"
      }
    },
    {
      "name": "placementContainer",
      "description": "Restrict placement to within this container.",
      "type": {
        "name": "Object as () => HTMLElement"
      },
      "defaultValue": {
        "func": false,
        "value": "null"
      }
    },
    {
      "name": "openOnHover",
      "description": "Instead of opening on click (default), open on hover.",
      "type": {
        "name": "boolean"
      },
      "defaultValue": {
        "func": false,
        "value": "false"
      }
    }
  ],
  "events": [
    {
      "name": "update:modelValue",
      "description": "Emitted when the dropdown button is toggled.",
      "type": {
        "names": [
          "boolean"
        ]
      }
    },
    {
      "name": "dropdown-placement",
      "description": "Emitted on initialisation.",
      "type": {
        "names": [
          "NeonDropdownPlacement"
        ]
      }
    },
    {
      "name": "blur",
      "description": "Emitted when the dropdown button is blurred.",
      "type": {
        "names": [
          "void"
        ]
      }
    },
    {
      "name": "focus",
      "description": "Emitted when the dropdown button is focussed.",
      "type": {
        "names": [
          "void"
        ]
      }
    },
    {
      "name": "button-ref",
      "description": "emitted on initialisation",
      "type": {
        "names": [
          "HTMLElement"
        ]
      }
    }
  ],
  "slots": [
    {
      "name": "dropdown-button",
      "description": "optionally replace the dropdown button with a custom control"
    },
    {
      "name": "default",
      "description": "The content of the open dropdown"
    }
  ]
}