{
  "displayName": "NeonToggle",
  "description": "<p>A toggle component for selecting one value from a range of options. This is equivalent to a radio button group. It can be styled as a <em>Toggle</em> or as <em>Radio buttons</em>.",
  "tags": {},
  "exportName": "default",
  "props": [
    {
      "name": "name",
      "description": "The name of the radio button group.",
      "type": {
        "name": "string"
      },
      "required": true
    },
    {
      "name": "modelValue",
      "description": "The key of the selected option.",
      "type": {
        "name": "string"
      },
      "required": true
    },
    {
      "name": "model",
      "description": "The list of options to present to the user.",
      "type": {
        "name": "Array as () => Array<NeonToggleModel>"
      },
      "required": true
    },
    {
      "name": "toggleStyle",
      "description": "The style of toggle to display to the user.",
      "type": {
        "name": "String as () => NeonToggleStyle"
      },
      "defaultValue": {
        "func": true,
        "value": "() => NeonToggleStyle.Toggle"
      }
    },
    {
      "name": "size",
      "description": "The size of the toggle.",
      "type": {
        "name": "String as () => NeonSize"
      },
      "defaultValue": {
        "func": true,
        "value": "() => NeonSize.Medium"
      }
    },
    {
      "name": "orientation",
      "description": "The orientation of the toggle if the style is a radio button group.",
      "type": {
        "name": "String as () => NeonOrientation"
      },
      "defaultValue": {
        "func": true,
        "value": "() => NeonOrientation.Vertical"
      }
    },
    {
      "name": "color",
      "description": "The color of the toggle.",
      "type": {
        "name": "String as () => NeonFunctionalColor"
      },
      "defaultValue": {
        "func": true,
        "value": "() => NeonFunctionalColor.Neutral"
      }
    },
    {
      "name": "disabled",
      "description": "Whether the toggle is disabled.",
      "type": {
        "name": "boolean"
      },
      "defaultValue": {
        "func": false,
        "value": "false"
      }
    }
  ],
  "events": [
    {
      "name": "update:modelValue",
      "description": "Emitted when the selected value changes.",
      "type": {
        "names": [
          "string"
        ]
      }
    }
  ]
}